/*
Phrase Strings API Reference

Testing UploadsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package phrase

import (
	"context"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/phrase/phrase-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_phrase_UploadsApiService(t *testing.T) {
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Send the mock response
		response := `{"foo": "bar"}`
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)

		w.Write([]byte(response))
	}))

	defer server.Close()

	configuration := phrase.NewConfiguration()
	configuration.BasePath = server.URL
	apiClient := phrase.NewAPIClient(configuration)

	t.Run("Test UploadsApiService UploadCreate", func(t *testing.T) {
		localVarOptionals := phrase.UploadCreateOpts{}
		resp, httpRes, err := apiClient.UploadsApi.UploadCreate(context.Background(), "project_id", &localVarOptionals)
		requestUrl := httpRes.Request.URL

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "/projects/project_id/uploads", requestUrl.Path)
		assert.Equal(t, "POST", httpRes.Request.Method)
	})

	t.Run("Test UploadsApiService UploadShow", func(t *testing.T) {
		localVarOptionals := phrase.UploadShowOpts{}
		resp, httpRes, err := apiClient.UploadsApi.UploadShow(context.Background(), "project_id", "upload_id", &localVarOptionals)
		requestUrl := httpRes.Request.URL

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "/projects/project_id/uploads/upload_id", requestUrl.Path)
		assert.Equal(t, "GET", httpRes.Request.Method)
	})

	t.Run("Test UploadsApiService UploadsList", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		// var projectId string

		// resp, httpRes, err := apiClient.UploadsApi.UploadsList(context.Background(), projectId).Execute()

		// require.Nil(t, err)
		// require.NotNil(t, resp)
		// assert.Equal(t, 200, httpRes.StatusCode)

	})

}
