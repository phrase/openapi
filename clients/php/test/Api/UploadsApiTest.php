<?php
/**
 * UploadsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

 namespace Phrase;

 use \Phrase\Configuration as Configuration;
 use \Phrase\ApiException;
 use \Phrase\ObjectSerializer;

 use \Phrase\Api\UploadsApi as Api;
 use \Phrase\Model\UploadCreateParameters;

 use PHPUnit\Framework\TestCase;

 use GuzzleHttp\Client;
 use GuzzleHttp\Handler\MockHandler;
 use GuzzleHttp\HandlerStack;
 use GuzzleHttp\Middleware;
 use GuzzleHttp\Psr7\Response;

/**
 * UploadsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Phrase
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UploadsApiTest extends TestCase
{
    private $apiInstance;
    private $mock;
    private $history = [];

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->mock = new MockHandler();
        $history = Middleware::history($this->history);
        $handlerStack = HandlerStack::create($this->mock);
        $handlerStack->push($history);
        $client = new Client(['handler' => $handlerStack]);

        $config = Configuration::getDefaultConfiguration()->setApiKey('Authorization', 'YOUR_API_KEY');
        $config = Configuration::getDefaultConfiguration()->setApiKeyPrefix('Authorization', 'token');

        $this->apiInstance = new Api($client, $config);
    }

    /**
     * Test case for uploadCreate
     *
     * Upload a new file.
     *
     */
    public function testUploadCreate()
    {
        $fileName = '/tmp/test.txt';
        $this->mock->append(new Response(200, [], '{"id": "dGVzdA","filename": "my_file.yml","state": "pending","format": "yml","upload_tags": [{"name": "my_tag","priority": 1}],"created_at": "2018-02-19T15:47:30Z","updated_at": "2018-02-19T15:47:30Z","file_size": 0,"source_locale": "en","target_locales": ["de","fr"],"file": {"id": "dGVzdA","name": "my_file.yml","content_type": "application/x-yaml","encoding": "UTF-8","created_at": "2018-02-19T15:47:30Z","updated_at": "2018-02-19T15:47:30Z","file_size": 0,"format": "yml","hash": "3cfd3b8d7c7a1d6c9f6d2f6c7d6b6c3c"} }'));
        $projectId = "projectId_example";
        $file = new \SplFileObject($fileName, 'w+');
        $file->fwrite('test');

        $result = $this->apiInstance->uploadCreate(
            $projectId,
            $file,
            "yml",
            "en",
            null, # x_phrase_app_otp
            null, # branch
            null, # tags
            null, # update_translations
            null, # update_custom_metadata
            null, # update_translation_keys
            null, # update_translations_on_source_match
            null, # source_locale_id
            null, # update_descriptions
            null, # convert_emoji
            null, # skip_upload_tags
            null, # skip_unverification
            null, # file_encoding
            ['en' => ['foo' => 3, 'bar' => 'baz']] # locale_mapping
        );
        $file = null;
        unlink($fileName);

        $this->assertEquals('dGVzdA', $result->getId());
        $this->assertEquals('my_file.yml', $result->getFilename());
        $this->assertEquals('pending', $result->getState());
        $this->assertEquals('yml', $result->getFormat());
        $this->assertEquals(new \DateTime('2018-02-19T15:47:30Z'), $result->getCreatedAt());
        $this->assertEquals(new \DateTime('2018-02-19T15:47:30Z'), $result->getUpdatedAt());

        $lastRequest = $this->history[count($this->history) - 1]['request'];
        $this->assertEquals('POST', $lastRequest->getMethod());
        $this->assertEquals('/v2/projects/'.$projectId.'/uploads', $lastRequest->getUri()->getPath());
        $this->assertStringContainsString('multipart/form-data', $lastRequest->getHeader('Content-Type')[0]);
        $this->assertStringContainsString("Content-Disposition: form-data; name=\"locale_mapping[en][bar]\"\r\nContent-Length: 3\r\n\r\nbaz\r\n", $lastRequest->getBody()->getContents());
    }

    /**
     * Test case for uploadShow
     *
     * Get a single upload.
     *
     */
    public function testUploadShow()
    {
    }

    /**
     * Test case for uploadsList
     *
     * List uploads.
     *
     */
    public function testUploadsList()
    {
    }
}
