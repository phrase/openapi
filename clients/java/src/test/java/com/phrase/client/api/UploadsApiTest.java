/*
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.phrase.client.api;

import com.phrase.client.ApiClient;
import com.phrase.client.ApiException;
import com.phrase.client.Configuration;
import com.phrase.client.auth.HttpBasicAuth;

import java.io.File;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.phrase.client.model.Upload;

import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;

import org.junit.Test;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UploadsApi
 */
public class UploadsApiTest {

    MockWebServer mockBackend = new MockWebServer();

    private UploadsApi api;

    @Before
    public void setUp() throws IOException {
        mockBackend.start();

        ApiClient defaultClient = Configuration.getDefaultApiClient();
        defaultClient.setBasePath(mockBackend.url("/").toString());

        // Configure HTTP basic authorization: Basic
        HttpBasicAuth Basic = (HttpBasicAuth) defaultClient.getAuthentication("Basic");
        Basic.setUsername("TOKEN");
        Basic.setPassword("");

        api = new UploadsApi(defaultClient);
    }

    @After
    public void tearDown() throws IOException {
        mockBackend.shutdown();
    }

    /**
     * Upload a new file
     *
     * Upload a new language file. Creates necessary resources in your project.
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException
     * @throws InterruptedException
     */
    @Test
    public void uploadCreateTest() throws ApiException, IOException, InterruptedException {
        String body = "{\"id\":\"id_example\",\"created_at\": \"2015-01-28T09:52:53Z\"}";

        MockResponse mockResponse = new MockResponse()
            .addHeader("Content-Type", "application/json; charset=utf-8")
            .setBody(body);

        mockBackend.enqueue(mockResponse);

        String projectId = "projectId_example";
        String xPhraseAppOTP = null;
        String branch = "branch_example";
        File file = File.createTempFile("test", "test");
        file.deleteOnExit();
        String fileFormat = "simple_json";
        String localeId = "en";
        String tags = null;
        Boolean updateTranslations = null;
        Boolean updateDescriptions = null;
        Boolean convertEmoji = null;
        Boolean skipUploadTags = null;
        Boolean skipUnverification = null;
        String fileEncoding = null;
        Object localeMapping = null;
        Object formatOptions = null;
        Boolean autotranslate = null;
        Boolean markReviewed = null;
        Boolean tagOnlyAffectedKeys = null;
        Upload response = api.uploadCreate(projectId, file, fileFormat, localeId, xPhraseAppOTP, branch, tags, updateTranslations, updateDescriptions, convertEmoji, skipUploadTags, skipUnverification, fileEncoding, localeMapping, formatOptions, autotranslate, markReviewed, tagOnlyAffectedKeys);

        Assert.assertEquals("valid id returned", "id_example", response.getId());
        Assert.assertEquals("valid creation date returned", OffsetDateTime.parse("2015-01-28T09:52:53Z"), response.getCreatedAt());

        RecordedRequest recordedRequest = mockBackend.takeRequest();
        Assert.assertEquals("Request path", "//projects/projectId_example/uploads", recordedRequest.getPath());
        Assert.assertTrue("Request payload", recordedRequest.getBody().readUtf8().contains("Content-Disposition: form-data; name=\"file\""));
    }

    /**
     * Get a single upload
     *
     * View details and summary for a single upload.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Ignore
    public void uploadShowTest() throws ApiException {
        String projectId = null;
        String id = null;
        String xPhraseAppOTP = null;
        String branch = null;
        Upload response = api.uploadShow(projectId, id, xPhraseAppOTP, branch);

        // TODO: test validations
    }

    /**
     * List uploads
     *
     * List all uploads for the given project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Ignore
    public void uploadsListTest() throws ApiException {
        String projectId = null;
        String xPhraseAppOTP = null;
        Integer page = null;
        Integer perPage = null;
        String branch = null;
        List<Upload> response = api.uploadsList(projectId, xPhraseAppOTP, page, perPage, branch);

        // TODO: test validations
    }

}
